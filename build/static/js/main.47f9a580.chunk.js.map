{"version":3,"sources":["Components/Strip.js","Components/Welcome.js","App.js","reportWebVitals.js","index.js"],"names":["ComicStrip","props","useState","MAX","setMAX","match","params","num","issue","setIssue","comic","setComic","useEffect","console","log","axios","get","then","response","data","catch","err","id","onClick","disabled","Math","floor","random","title","src","link","date","views","Welcome","popular","setPopular","href","map","val","App","style","textDecoration","color","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAIe,SAASA,EAAWC,GAAQ,IAAD,EAChBC,mBAAS,GADO,mBAC/BC,EAD+B,KAC1BC,EAD0B,OAEZF,mBAASD,EAAMI,MAAMC,OAAOC,KAFhB,mBAE/BC,EAF+B,KAExBC,EAFwB,OAGZP,mBAAS,MAHG,mBAG/BQ,EAH+B,KAGxBC,EAHwB,KAgCtC,OA3BAC,qBAAU,WACNC,QAAQC,IAAI,aAEZC,IAAMC,IACF,gBACFC,MAAK,SAACC,GACJd,EAAOc,EAASC,KAAKZ,QACtBa,OAAM,SAACC,GACNR,QAAQC,IAAIO,QAEjB,IAEHT,qBAAU,WACNC,QAAQC,IAAI,mBAEZC,IAAMC,IAAI,eAAgB,CACtBV,OAAQ,CACJC,IAAe,GAATC,EAAa,KAAOA,KAE/BS,MAAK,SAACC,GAELP,EAASO,EAASC,SACnBC,OAAM,SAACC,GACNR,QAAQC,IAAIO,QAEjB,CAACb,IAGA,8BAEmB,MAATE,GAA0B,GAAPP,EACjB,sBAAKmB,GAAG,SAAR,UACI,sBAAKA,GAAG,UAAR,UACI,wBAAQC,QAAS,kBAAMd,EAASC,EAAMH,IAAM,IAAIiB,SAAuB,GAAbd,EAAMH,IAAhE,sBACA,wBAAQgB,QAAS,kBAAMd,EAASgB,KAAKC,MAAMD,KAAKE,SAAWxB,GAAO,IAAlE,oBACA,wBAAQoB,QAAS,kBAAMd,EAASC,EAAMH,IAAM,IAAIiB,SAAUd,EAAMH,KAAOJ,EAAvE,qBAEJ,qBAAKmB,GAAG,QAAR,SACI,gCACI,oBAAGA,GAAG,gBAAN,UAAsB,iCAASZ,EAAMH,MAArC,KAAqDG,EAAMkB,SAC3D,qBAAKN,GAAG,gBAAgBO,IAAKnB,EAAMoB,OACnC,mBAAGR,GAAG,gBAAN,SAAuBZ,EAAMqB,OAC7B,oBAAGT,GAAG,gBAAN,UAAuBZ,EAAMsB,MAA7B,oBAIZ,0CCpDL,SAASC,IAAW,IAAD,EACA/B,mBAAS,IADT,mBACvBgC,EADuB,KACdC,EADc,KAa9B,OAVAvB,qBAAU,WACNG,IAAMC,IACF,yBACFC,MAAK,SAACC,GACJiB,EAAWjB,EAASC,SACrBC,OAAM,SAACC,GACNR,QAAQC,IAAIO,QAEjB,IAGC,gCACI,sEACA,uBACA,uCAAS,mBAAGe,KAAK,SAAR,kBAAT,iCACA,uBACA,2EACA,6BAEQF,GAAW,GACPA,EAAQG,KAAI,SAACC,GACT,OAAO,+BAAI,mBAAGF,KAAM,UAAYE,EAAI,GAAzB,SAA8BA,EAAI,KAAtC,KAAgDA,EAAI,GAApD,eAEX,6CCTTC,MAff,WACE,OACE,sBAAKjB,GAAG,YAAR,UACE,6BAAI,mBAAGc,KAAK,IAAII,MAAO,CAACC,eAAgB,OAAQC,MAAO,SAAnD,iCACJ,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW7C,IACtC,cAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,cAAcC,UAAW7C,IAC3C,cAAC,IAAD,CAAO4C,KAAK,GAAGC,UAAWZ,aCDrBa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.47f9a580.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport '../css/Strip.css';\n\nexport default function ComicStrip(props) {\n    const [MAX, setMAX] = useState(0);\n    const [issue, setIssue] = useState(props.match.params.num);\n    const [comic, setComic] = useState(null);\n\n    useEffect(() => {\n        console.log(\"useEffect\");\n\n        axios.get(\n            '/api/getXKCD'\n        ).then((response) => {\n            setMAX(response.data.num);\n        }).catch((err) => {\n            console.log(err);\n        });\n    }, []);\n\n    useEffect(() => {\n        console.log(\"useEffect issue\");\n\n        axios.get('/api/getXKCD', {\n            params: {\n                num: (issue == 0 ? null : issue)\n            }\n        }).then((response) => {\n            // setMAX(response.data.num);\n            setComic(response.data);\n        }).catch((err) => {\n            console.log(err);\n        });\n    }, [issue]);\n\n    return (\n        <div>\n            {\n                ((comic != null) && (MAX != 0)) ? (\n                    <div id=\"reader\">\n                        <div id=\"taskbar\">\n                            <button onClick={() => setIssue(comic.num - 1)} disabled={comic.num == 1}>Previous</button>\n                            <button onClick={() => setIssue(Math.floor(Math.random() * MAX) + 1)}>Random</button>\n                            <button onClick={() => setIssue(comic.num + 1)} disabled={comic.num == MAX}>Next</button>\n                        </div>\n                        <div id=\"strip\">\n                            <div>\n                                <p id=\"metadata_text\"><strong>{comic.num}</strong>: {comic.title}</p>\n                                <img id=\"metadata_text\" src={comic.link} />\n                                <p id=\"metadata_text\">{comic.date}</p>\n                                <p id=\"metadata_text\">{comic.views} views</p>\n                            </div>\n                        </div>\n                    </div>\n                ) : <p>Loading</p>\n            }\n        </div>\n\n    )\n}","import axios from 'axios';\nimport React, { useEffect, useState } from 'react';\n\nexport default function Welcome() {\n    const [popular, setPopular] = useState([]);\n\n    useEffect(() => {\n        axios.get(\n            '/api/getPopularComics'\n        ).then((response) => {\n            setPopular(response.data);\n        }).catch((err) => {\n            console.log(err);\n        });\n    }, []);\n\n    return (\n        <div>\n            <p>Welcome to the XKCD Comic Aggregator!</p>\n            <br />\n            <p>Click <a href=\"/comic\">HERE</a> to view the current comic!</p>\n            <br />\n            <p>Or check out one of these trending comics:</p>\n            <ul>\n                {\n                    popular != [] ? (\n                        popular.map((val) => {\n                            return <li><a href={\"/comic/\" + val[0]}>{val[0]}</a>: {val[1]} views</li>\n                        })\n                    ) : <p>Loading</p>\n                }\n            </ul>\n        </div>\n    )\n}","import './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport ComicStrip from './Components/Strip';\nimport Welcome from './Components/Welcome';\n\nfunction App() {\n  return (\n    <div id=\"page-cont\">\n      <h1><a href=\"/\" style={{textDecoration: 'none', color: 'black'}}>XKCD Comic Reader</a></h1>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/comic\" component={ComicStrip} />\n          <Route exact path=\"/comic/:num\" component={ComicStrip} />\n          <Route path=\"\" component={Welcome}/>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}